- error_id: 0
  expected_response: |
    A `ZeroDivisionError` occurs when the code tries to perform division by zero, which is mathematically undefined.
    The error originates from line 1 of the script: `a = 1 / 0`.

    You can fix this error by ensuring that the denominator is not zero before performing the division operation.

    ```python
    denominator = 0
    if denominator == 0:
        print("Cannot divide by zero!")
    else:
        a = 1 / denominator
    ```
- error_id: 1
  expected_response: |
    A `UnicodeEncodeError` occurs when attempting to encode a string with characters that are not representable in the specified encoding.
    In this case, the string `'\u3053\u3093\u306b\u3061\u306f'` (Japanese "こんにちは") contains Unicode characters that cannot be encoded in the ASCII codec, which only supports characters with ordinal values between 0 and 127.

    You can use a compatible encoding such as UTF-8 to handle the Unicode characters.

    ```python
    '\u3053\u3093\u306b\u3061\u306f'.encode('utf-8')
    ```
- error_id: 2
  expected_response: |
    A `TypeError` occurs when a function is called with an incorrect number of arguments. In this case, the error indicates that the function `example_function` was called with one argument (`42`) but requires a second positional argument named `arg2`.

    The problematic line in the script is:
    ```python
    example_function(42)
    ```

    To resolve this, ensure that all required arguments are provided when calling the function. For instance:

    ```python
    def example_function(arg1, arg2):
        print(arg1, arg2)

    # Correct call
    example_function(42, "second_argument")
    ```

    Alternatively, you can modify the function definition to provide a default value for `arg2` if it is optional:

    ```python
    def example_function(arg1, arg2="default_value"):
        print(arg1, arg2)

    # This call will now work without specifying `arg2`
    example_function(42)
    ```

    Choose the solution based on whether `arg2` is essential for the function's operation or can have a reasonable default value.

- error_id: 3
  expected_response: |
    An `AttributeError` occurs when trying to access or call an attribute that an object does not have. 
    In this case, the error arises because the `list` object does not have a `push` method. 
    In Python, lists use the `append()` method to add elements.

    Corrected Code:
    ```python
    my_list = []
    my_list.append(0)
    ```

    If you want a stack-like structure with `push`, consider using the `collections.deque` class:
    ```python
    from collections import deque
    stack = deque()
    stack.append(0)  # Acts like push
    ```

- error_id: 4
  expected_response: |
    A `NameError` occurs when trying to use a name (variable, function, or module) that is not defined in the current scope. 
    Here, the `math` module is being used without importing it. Python requires you to explicitly import modules before using them.

    Corrected Code:
    ```python
    import math
    print(math.exp(1000))
    ```

    Make sure to place the import statement at the beginning of your script.

- error_id: 5
  expected_response: |
    The `ls` command outputs `No such file or directory` when the specified folder does not exist. 
    In this case, the folder `inexistant_folder` is missing.

    Solution:
    1. Verify the folder name for typos.
    2. Create the folder if it does not exist:
    ```bash
    mkdir inexistant_folder
    ls inexistant_folder
    ```

- error_id: 6
  expected_response: |
    An `IndentationError` occurs when the indentation of your code does not follow Python's strict indentation rules. 
    In this case, a line is over-indented, making Python unable to parse the code.

    Corrected Code:
    ```python
    def my_function():
        print("This line has correct indentation.")
    ```

    Tips:
    - Use 4 spaces per indentation level.
    - Avoid mixing tabs and spaces in the same file.

- error_id: 7
  expected_response: |
    The `cd` command returns an error when trying to change directories to a location that does not exist. 
    Here, the folder `inexistant_folder` is missing.

    Solution:
    1. Ensure the folder exists by checking with `ls`.
    2. Create the folder if it is missing:
    ```bash
    mkdir inexistant_folder
    cd inexistant_folder
    ```

- error_id: 8
  expected_response: |
    A `KeyError` occurs when attempting to access a dictionary key that does not exist. 
    Here, the key `key2` is missing in the dictionary.

    Corrected Code:
    ```python
    my_dict = {"key1": "value1"}
    print(my_dict.get("key2", "default_value"))
    ```

    Explanation:
    - Use `dict.get()` to provide a default value when the key is missing.
    - Alternatively, check if the key exists:
    ```python
    if "key2" in my_dict:
        print(my_dict["key2"])
    ```

- error_id: 9
  expected_response: |
    A `TypeError` occurs when performing an operation on incompatible types. 
    In this case, the addition operation `+` is applied to an integer and a string, which is not allowed.

    Corrected Code:
    ```python
    def example_function(arg1, arg2):
        return arg1 + int(arg2)

    print(example_function(42, "43"))  # Output: 85
    ```

    Explanation:
    - Convert the string to an integer using `int(arg2)` to ensure compatibility.
    - Alternatively, concatenate strings instead of adding them:
    ```python
    print(str(42) + " is the answer")
    ```

- error_id: 10
  expected_response: |
    A `TypeError` occurs when calling `len()` on an object that does not support it. 
    In this case, `len()` is called on an integer, which is not iterable.

    Corrected Code:
    ```python
    print(len("string"))  # Works for strings
    print(len([1, 2, 3]))  # Works for lists
    ```

    Explanation:
    - Use `len()` only on objects like strings, lists, dictionaries, or other collections.

- error_id: 11
  expected_response: |
    A `TypeError` occurs when passing an invalid keyword argument to a function. 
    In this case, the `example_function` does not accept `invalid_keyword_argument`.

    Corrected Code:
    ```python
    def example_function(valid_argument):
        print(valid_argument)

    example_function(valid_argument=42)
    ```

    Explanation:
    - Ensure the keyword arguments match the function’s parameter names exactly.
    - Review the function definition to confirm valid parameters.

- error_id: 12
  expected_response: |
    The `cd` command fails when attempting to change directories to a file. 
    In this case, `file.txt` is not a folder.

    Solution:
    1. Ensure the target is a directory by verifying with `ls`.
    2. If needed, create a valid folder:
    ```bash
    mkdir valid_folder
    cd valid_folder
    ```

- error_id: 13
  expected_response: |
    An `IndexError` occurs when accessing a list index that is out of range. 
    In this case, the list is empty, so index 0 is invalid.

    Corrected Code:
    ```python
    my_list = [1, 2, 3]
    if my_list:
        print(my_list[0])  # Output: 1
    ```

    Explanation:
    - Always ensure the list contains elements before accessing indices.

- error_id: 14
  expected_response: |
    A `RecursionError` occurs when the maximum recursion depth is exceeded. 
    This happens when a recursive function calls itself indefinitely without a termination condition.

    Corrected Code:
    ```python
    def recursive_function(counter):
        if counter == 0:
            return
        recursive_function(counter - 1)

    recursive_function(10)  # Terminates after 10 calls
    ```

    Explanation:
    - Always include a base case in recursive functions to stop infinite calls.

- error_id: 15
  expected_response: |
    A `FileNotFoundError` occurs when attempting to open a file that does not exist in the specified directory. 
    Here, the file `non_existing_file.txt` is missing.

    Solution:
    1. Ensure the file exists and is located in the correct directory.
    2. Use exception handling to manage missing files:
    ```python
    try:
        with open("non_existing_file.txt") as file:
            content = file.read()
    except FileNotFoundError:
        print("The file does not exist.")
    ```

- error_id: 16
  expected_response: |
    A `NameError` occurs when referencing a variable that has not been defined. 
    In this case, `inexistant_variable` does not exist in the current scope.

    Corrected Code:
    ```python
    my_variable = "This is a defined variable"
    print(my_variable)  # Output: This is a defined variable
    ```

    Explanation:
    - Ensure all variables are properly defined before use.
    - Double-check for typos in variable names.

- error_id: 17
  expected_response: |
    A `SyntaxError` occurs when the Python interpreter encounters invalid syntax. 
    In this case, the closing parenthesis is missing in the `print` statement.

    Corrected Code:
    ```python
    print("This will not cause a syntax error.")
    ```

    Explanation:
    - Ensure all opening brackets, parentheses, or quotation marks are properly closed.

- error_id: 18
  expected_response: |
    A `NameError` occurs when using an undefined function. 
    In this case, `prin` is not a valid function. Python suggests it might be a typo for `print`.

    Corrected Code:
    ```python
    print("chat")  # Correctly calls the built-in print function
    ```

    Explanation:
    - Double-check the function name for typos.
    - Use Python's built-in functions or properly define custom functions before calling them.

- error_id: 19
  expected_response: |
    A `ModuleNotFoundError` occurs when trying to import a module that is not installed or does not exist. 
    Here, the module `nonexistent_module` is missing.

    Solution:
    1. Ensure the module name is correct.
    2. Install the module if it is available:
    ```bash
    pip install module_name
    ```
    3. If the module is not available, remove or replace the import.

- error_id: 20
  expected_response: |
    An `AssertionError` occurs when an assertion statement fails. 
    In this case, the condition `1 + 1 == 3` is false.

    Corrected Code:
    ```python
    assert 1 + 1 == 2  # No error since the condition is true
    ```

    Explanation:
    - Use assertions for debugging and to enforce expected conditions in code.
    - Ensure the condition in the `assert` statement is valid.

- error_id: 21
  expected_response: |
    A `SyntaxError` occurs when the Python interpreter encounters invalid syntax. 
    In this case, Python does not recognize text in French as a comment.

    Corrected Code:
    ```python
    # Ceci est un commentaire en Python
    ```

    Explanation:
    - Use `#` at the beginning of a line to write a comment in Python.

- error_id: 22
  expected_response: |
    A `ValueError` occurs when a function receives an argument of the correct type but an inappropriate value. 
    In this case, trying to convert the string `"a"` to an integer is invalid.

    Corrected Code:
    ```python
    print(int("123"))  # Valid conversion
    ```

    Explanation:
    - Ensure the value being converted is compatible with the target type.

- error_id: 23
  expected_response: |
    A `TypeError` occurs when an operation is applied to incompatible types. 
    Here, the addition operator `+` is applied to an integer and a string.

    Corrected Code:
    ```python
    print(1 + int("1"))  # Output: 2
    ```

    Explanation:
    - Ensure operands are of compatible types for the operation.
    - Convert data types as needed to avoid such errors.
